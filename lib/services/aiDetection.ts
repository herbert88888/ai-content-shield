import { analyzeWithMultiAPI } from './multiApiDetection'
import type { AIDetectionResult } from '@/types'

// OpenAI API fallback for AI detection
async function analyzeWithOpenAI(content: string): Promise<AIDetectionResult> {
  const apiKey = process.env.OPENAI_API_KEY
  
  if (!apiKey) {
    throw new Error('OpenAI API key not configured')
  }

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are an AI content detector. Analyze the given text and determine if it was likely generated by AI. Provide a probability score (0-100), confidence level, and reasoning.'
          },
          {
            role: 'user',
            content: `Analyze this text for AI generation: "${content}"`
          }
        ],
        temperature: 0.1,
      }),
    })

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`)
    }

    const data = await response.json()
    const analysis = data.choices[0]?.message?.content

    // Parse the response (this is a simplified implementation)
    // In a real scenario, you'd want more sophisticated parsing
    const probability = Math.floor(Math.random() * 100) // Placeholder
    const confidence = probability > 70 ? 'high' : probability > 40 ? 'medium' : 'low'

    return {
      probability,
      confidence,
      highlightedPhrases: [],
      reasoning: analysis || 'Analysis completed using OpenAI API'
    }
  } catch (error) {
    console.error('OpenAI API error:', error)
    throw error
  }
}

export async function analyzeAIContent(content: string): Promise<AIDetectionResult> {
  // Check if multi-API detection is enabled
  const useMultiAPI = process.env.ENABLE_MULTI_API_DETECTION === 'true'
  
  if (useMultiAPI) {
    try {
      return await analyzeWithMultiAPI(content)
    } catch (error) {
      console.warn('Multi-API detection failed, falling back to OpenAI:', error)
    }
  }

  // Fallback to OpenAI API
  if (process.env.OPENAI_API_KEY) {
    return await analyzeWithOpenAI(content)
  }

  // If no APIs are configured, return a mock result
  return {
    probability: 50,
    confidence: 'low',
    highlightedPhrases: [],
    reasoning: 'No AI detection APIs configured. Please set up OpenAI API key or enable multi-API detection.'
  }
}